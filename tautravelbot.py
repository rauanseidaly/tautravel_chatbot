import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters.command import Command
from aiogram.types import Message
from aiogram.filters import Command, CommandObject
import json
import os

# –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã

CHAT_ID = "-1002530782917"  # ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS = [686385290, 648034216, 1096741599]  # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_questions = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ñ–∞–π–ª
def save_questions():
    with open('user_questions.json', 'w', encoding='utf-8') as f:
        json.dump(user_questions, f, ensure_ascii=False)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
def load_questions():
    if os.path.exists('user_questions.json'):
        with open('user_questions.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}


@dp.message(Command('start'))
async def start_command(message: types.Message) -> None:
    kb = [
        [types.InlineKeyboardButton(text='–ß—Ç–æ —Ç–∞–∫–æ–µ TauTravel', callback_data='about')],
        [types.InlineKeyboardButton(text='FAQ', callback_data='faq')],
        [types.InlineKeyboardButton(text='–ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å', callback_data='ask_question')],
        [types.InlineKeyboardButton(text='–û—Å—Ç–∞–≤–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è', callback_data='feedback')],
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç TauTravel', reply_markup=keyboard)


@dp.message(Command('admin'))
async def admin_command(message: types.Message) -> None:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    kb = [
        [types.InlineKeyboardButton(text='–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤', callback_data='admin_questions')],
        [types.InlineKeyboardButton(text='–°–ø–∏—Å–æ–∫ –ø–æ–∂–µ–ª–∞–Ω–∏–π', callback_data='admin_feedback')],
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    await message.answer('–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ TauTravel', reply_markup=keyboard)


@dp.message(Command('reply'))
async def reply_command(message: types.Message, command: CommandObject) -> None:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    if not command.args:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reply ID_–≤–æ–ø—Ä–æ—Å–∞ –í–∞—à –æ—Ç–≤–µ—Ç")
        return

    args = command.args.split(' ', 1)
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reply ID_–≤–æ–ø—Ä–æ—Å–∞ –í–∞—à –æ—Ç–≤–µ—Ç")
        return

    question_id = args[0]
    answer_text = args[1]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
    if question_id not in user_questions:
        await message.answer(f"–í–æ–ø—Ä–æ—Å —Å ID {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    question_data = user_questions[question_id]
    user_id = question_data['user_id']
    question_text = question_data['text']

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await message.bot.send_message(
            chat_id=user_id,
            text=f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n–í–æ–ø—Ä–æ—Å: {question_text}\n\n–û—Ç–≤–µ—Ç: {answer_text}"
        )
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–ø—Ä–æ—Å–∞
        user_questions[question_id]['answered'] = True
        user_questions[question_id]['answer'] = answer_text
        save_questions()

        await message.answer(f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å {question_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")


@dp.callback_query(F.data == "admin_questions")
async def admin_questions_callback(callback: types.CallbackQuery) -> None:
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å—ã (–Ω–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è)
    questions = {qid: q for qid, q in user_questions.items() if
                 q['type'] == 'question' and not q.get('answered', False)}

    if not questions:
        await callback.message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
        await callback.answer()
        return

    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤
    message_text = "üìã –°–ø–∏—Å–æ–∫ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:\n\n"

    for qid, q in questions.items():
        message_text += f"ID: {qid}\n"
        message_text += f"–û—Ç: {q['username']} ({q['user_id']})\n"
        message_text += f"–í–æ–ø—Ä–æ—Å: {q['text']}\n"
        message_text += f"–î–∞—Ç–∞: {q['date']}\n"
        message_text += "\n–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        message_text += f"/reply {qid} –í–∞—à –æ—Ç–≤–µ—Ç\n\n"
        message_text += "-------------------\n\n"

    await callback.message.answer(message_text)
    await callback.answer()


@dp.callback_query(F.data == "admin_feedback")
async def admin_feedback_callback(callback: types.CallbackQuery) -> None:
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–∂–µ–ª–∞–Ω–∏—è
    feedback = {qid: q for qid, q in user_questions.items() if q['type'] == 'feedback'}

    if not feedback:
        await callback.message.answer("–ù–µ—Ç –ø–æ–∂–µ–ª–∞–Ω–∏–π.")
        await callback.answer()
        return

    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–∂–µ–ª–∞–Ω–∏–π
    message_text = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–∂–µ–ª–∞–Ω–∏–π:\n\n"

    for qid, q in feedback.items():
        message_text += f"ID: {qid}\n"
        message_text += f"–û—Ç: {q['username']} ({q['user_id']})\n"
        message_text += f"–ü–æ–∂–µ–ª–∞–Ω–∏–µ: {q['text']}\n"
        message_text += f"–î–∞—Ç–∞: {q['date']}\n"
        message_text += "-------------------\n\n"

    await callback.message.answer(message_text)
    await callback.answer()


@dp.callback_query(F.data == "about")
async def about_callback(callback: types.CallbackQuery) -> None:
    await callback.message.answer(
        "TauTravel ‚Äî —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å –¥–ª—è –ª—é–±–∏—Ç–µ–ª–µ–π –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞ –∏ –≥–æ—Ä.")
    await callback.answer()


@dp.callback_query(F.data == "faq")
async def faq_callback(callback: types.CallbackQuery) -> None:
    kb = [
        [types.InlineKeyboardButton(text='–ö–∞–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø–æ—Ö–æ–¥—É?', callback_data='faq_join')],
        [types.InlineKeyboardButton(text='–ß—Ç–æ –±—Ä–∞—Ç—å —Å —Å–æ–±–æ–π?', callback_data='faq_gear')],
        [types.InlineKeyboardButton(text='–ù—É–∂–Ω–∞ –ª–∏ —Ñ–∏–∑–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞?', callback_data='faq_fitness')],
        [types.InlineKeyboardButton(text='–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å —Ç—É—Ä?', callback_data='faq_payment')],
        [types.InlineKeyboardButton(text='–í–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–≥', callback_data='faq_refund')],
        [types.InlineKeyboardButton(text='–ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?', callback_data='faq_app')],
        [types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main')],
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:', reply_markup=keyboard)
    await callback.answer()


@dp.callback_query(F.data == "faq_join")
async def faq_join_callback(callback: types.CallbackQuery) -> None:
    await callback.message.answer(
        "–ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø–æ—Ö–æ–¥—É, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ –∏–ª–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏ –≤–Ω–µ—Å–∏—Ç–µ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –ø–æ—Ö–æ–¥–∞.")
    await callback.answer()


@dp.callback_query(F.data == "faq_gear")
async def faq_gear_callback(callback: types.CallbackQuery) -> None:
    await callback.message.answer(
        "–°–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –ø–æ—Ö–æ–¥–∞. –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–µ. –ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä –≤–∫–ª—é—á–∞–µ—Ç: —Ä—é–∫–∑–∞–∫, —Å–ø–∞–ª—å–Ω–∏–∫, —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–≤—Ä–∏–∫, —Ç—Ä–µ–∫–∫–∏–Ω–≥–æ–≤—É—é –æ–±—É–≤—å –∏ –æ–¥–µ–∂–¥—É –ø–æ —Å–µ–∑–æ–Ω—É.")
    await callback.answer()


@dp.callback_query(F.data == "faq_fitness")
async def faq_fitness_callback(callback: types.CallbackQuery) -> None:
    await callback.message.answer(
        "–î–∞, –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –Ω–∞—à–∏—Ö –ø–æ—Ö–æ–¥–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–∞–∑–æ–≤–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞. –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —É–∫–∞–∑–∞–Ω –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫–∞–∂–¥–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞. –î–ª—è –Ω–æ–≤–∏—á–∫–æ–≤ –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞—á–∏–Ω–∞—Ç—å —Å –æ–¥–Ω–æ–¥–Ω–µ–≤–Ω—ã—Ö –ø–æ—Ö–æ–¥–æ–≤ –∏–ª–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ª—ë–≥–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
    await callback.answer()


@dp.callback_query(F.data == "faq_payment")
async def faq_payment_callback(callback: types.CallbackQuery) -> None:
    await callback.message.answer(
        "–û–ø–ª–∞—Ç–∏—Ç—å —Ç—É—Ä –º–æ–∂–Ω–æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π —á–µ—Ä–µ–∑ –Ω–∞—à —Å–∞–π—Ç –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –¢–∞–∫–∂–µ –≤–æ–∑–º–æ–∂–Ω–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ QR-–∫–æ–¥—É –∏–ª–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏–º –ø–µ—Ä–µ–≤–æ–¥–æ–º. –î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–Ω–µ—Å—Ç–∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ 30% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç—É—Ä–∞.")
    await callback.answer()


@dp.callback_query(F.data == "faq_refund")
async def faq_refund_callback(callback: types.CallbackQuery) -> None:
    await callback.message.answer(
        "–ü—Ä–∏ –æ—Ç–º–µ–Ω–µ —É—á–∞—Å—Ç–∏—è –≤ –ø–æ—Ö–æ–¥–µ –∑–∞ 14 –¥–Ω–µ–π –¥–æ —Å—Ç–∞—Ä—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è 100% –æ–ø–ª–∞—Ç—ã, –∑–∞ 7-13 –¥–Ω–µ–π - 50%. –ü—Ä–∏ –æ—Ç–º–µ–Ω–µ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 7 –¥–Ω–µ–π –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è. –í —Å–ª—É—á–∞–µ –æ—Ç–º–µ–Ω—ã –ø–æ—Ö–æ–¥–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å.")
    await callback.answer()


@dp.callback_query(F.data == "faq_app")
async def faq_app_callback(callback: types.CallbackQuery) -> None:
    await callback.message.answer(
        "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ TauTravel –¥–æ—Å—Ç—É–ø–Ω–æ –≤ App Store –∏ Google Play. –°–∫–∞—á–∞–π—Ç–µ –µ–≥–æ, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é email –∏–ª–∏ —á–µ—Ä–µ–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞—Ç–∞–ª–æ–≥—É —Ç—É—Ä–æ–≤, –æ—Ç–∑—ã–≤–∞–º –∏ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É.")
    await callback.answer()


@dp.callback_query(F.data == "back_to_main")
async def back_to_main_callback(callback: types.CallbackQuery) -> None:
    await start_command(callback.message)
    await callback.answer()


@dp.callback_query(F.data == "ask_question")
async def ask_question_callback(callback: types.CallbackQuery) -> None:
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –û–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º.")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    dp.user_data[callback.from_user.id] = {"state": "waiting_for_question"}
    await callback.answer()


@dp.callback_query(F.data == "feedback")
async def feedback_callback(callback: types.CallbackQuery) -> None:
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–∑—ã–≤ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ!")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    dp.user_data[callback.from_user.id] = {"state": "waiting_for_feedback"}
    await callback.answer()


@dp.message()
async def all_handler(message: types.Message) -> None:
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in dp.user_data:
        state = dp.user_data[user_id].get("state")

        if state == "waiting_for_question":
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
            import time
            question_id = f"q{int(time.time())}"

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å
            user_questions[question_id] = {
                "user_id": user_id,
                "username": message.from_user.username or message.from_user.full_name,
                "text": message.text,
                "date": time.strftime("%Y-%m-%d %H:%M:%S"),
                "type": "question",
                "answered": False
            }
            save_questions()

            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            try:
                await message.bot.send_message(
                    chat_id=CHAT_ID,
                    text=f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å (ID: {question_id}):\n\n"
                         f"–û—Ç: {message.from_user.full_name} (@{message.from_user.username})\n"
                         f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n\n"
                         f"–í–æ–ø—Ä–æ—Å: {message.text}\n\n"
                         f"–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                         f"/reply {question_id} –í–∞—à –æ—Ç–≤–µ—Ç"
                )
                await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –æ—Ç–≤–µ—Ç—è—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
            except Exception as e:
                await message.answer(
                    f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                print(f"Error sending message to admin chat: {e}")

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            dp.user_data.pop(user_id)
            return

        elif state == "waiting_for_feedback":
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø–æ–∂–µ–ª–∞–Ω–∏—è
            import time
            feedback_id = f"f{int(time.time())}"

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∂–µ–ª–∞–Ω–∏–µ
            user_questions[feedback_id] = {
                "user_id": user_id,
                "username": message.from_user.username or message.from_user.full_name,
                "text": message.text,
                "date": time.strftime("%Y-%m-%d %H:%M:%S"),
                "type": "feedback"
            }
            save_questions()

            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –ø–æ–∂–µ–ª–∞–Ω–∏–µ –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            try:
                await message.bot.send_message(
                    chat_id=CHAT_ID,
                    text=f"–ù–æ–≤–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ (ID: {feedback_id}):\n\n"
                         f"–û—Ç: {message.from_user.full_name} (@{message.from_user.username})\n"
                         f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n\n"
                         f"–ü–æ–∂–µ–ª–∞–Ω–∏–µ: {message.text}"
                )
                await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç–µ–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ.")
            except Exception as e:
                await message.answer(
                    f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞—à–µ–≥–æ –ø–æ–∂–µ–ª–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                print(f"Error sending message to admin chat: {e}")

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            dp.user_data.pop(user_id)
            return

    # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Å–æ–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    kb = [
        [types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='back_to_main')],
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é.", reply_markup=keyboard)


async def main() -> None:
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    global user_questions
    user_questions = load_questions()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    dp.user_data = {}

    token = ""  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    bot = Bot(token)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
